/**
 * Generated by "@vuepress/internal-site-data"
 */
export const siteData = {
  "title": "VuePress Blog Example",
  "description": "This is a blog example built by VuePress",
  "base": "/yumoblog/",
  "pages": [
    {
      "title": "我为那些勇敢的爱情鼓掌",
      "frontmatter": {
        "date": "2019-10-24T00:00:00.000Z",
        "tag": [
          "frontmatter",
          "原创"
        ],
        "author": "yumo",
        "location": "beijing",
        "layout": "Post",
        "permalink": "/:year/:month/:day/:slug"
      },
      "regularPath": "/_posts/2018-11-7-frontmatter-in-vuepress-2.html",
      "relativePath": "_posts/2018-11-7-frontmatter-in-vuepress-2.md",
      "key": "v-4a81aa96",
      "path": "/2019/10/24/frontmatter-in-vuepress-2/",
      "summary": "\n\n曾亲见一场感情和现实的博弈，最终感情获胜。我这个吃瓜群众也跟着长舒了一口气。\n\n当一份感情被迅速催化推进到婚姻的门槛时，势必面临一场情与钱的角逐，最终的获胜方是谁，在很大程度上取决于这份感情本身的坚韧程度和主人公的协调能力。\n\n在这里，我们可以清清楚楚地看到，爱情在没有得到亲情祝福时的摇摇欲坠，更可以明明白白地感受到，爱情在面临现实考验时的生生不息的力量。有人说，恋爱时期根本无法判断对方的真情 ...",
      "id": "post",
      "pid": "post"
    },
    {
      "title": "Markdown Slot",
      "frontmatter": {
        "date": "2019-2-26",
        "tag": [
          "markdown",
          "vuepress"
        ],
        "author": "ULIVZ",
        "location": "Hangzhou",
        "layout": "Post",
        "permalink": "/:year/:month/:day/:slug"
      },
      "regularPath": "/_posts/2019-2-26-markdown-slot-3.html",
      "relativePath": "_posts/2019-2-26-markdown-slot-3.md",
      "key": "v-a53c7390",
      "path": "/2019/02/26/markdown-slot-3/",
      "headers": [
        {
          "level": 2,
          "title": "Why do I need Markdown Slot?",
          "slug": "why-do-i-need-markdown-slot"
        },
        {
          "level": 2,
          "title": "Named Slots",
          "slug": "named-slots"
        },
        {
          "level": 2,
          "title": "Default Slot Content",
          "slug": "default-slot-content"
        },
        {
          "level": 2,
          "title": "Example",
          "slug": "example"
        }
      ],
      "summary": "\n\nVuePress implements a content distribution API for Markdown. With this feature, you can split your document into multiple fragments to facilitate flexible composition in the layout component.\n\nWh ...",
      "id": "post",
      "pid": "post"
    },
    {
      "title": "Front Matter in VuePress",
      "frontmatter": {
        "date": "2018-11-7",
        "tag": [
          "frontmatter",
          "vuepress"
        ],
        "author": "ULIVZ",
        "location": "Hangzhou",
        "layout": "Post",
        "permalink": "/:year/:month/:day/:slug"
      },
      "regularPath": "/_posts/2018-11-7-frontmatter-in-vuepress-3.html",
      "relativePath": "_posts/2018-11-7-frontmatter-in-vuepress-3.md",
      "key": "v-7a0f1d94",
      "path": "/2018/11/07/frontmatter-in-vuepress-3/",
      "headers": [
        {
          "level": 2,
          "title": "Alternative Front Matter Formats",
          "slug": "alternative-front-matter-formats"
        },
        {
          "level": 2,
          "title": "Predefined Variables",
          "slug": "predefined-variables"
        },
        {
          "level": 3,
          "title": "title",
          "slug": "title"
        },
        {
          "level": 3,
          "title": "lang",
          "slug": "lang"
        },
        {
          "level": 3,
          "title": "description",
          "slug": "description"
        },
        {
          "level": 3,
          "title": "layout",
          "slug": "layout"
        },
        {
          "level": 3,
          "title": "permalink",
          "slug": "permalink"
        },
        {
          "level": 3,
          "title": "metaTitle",
          "slug": "metatitle"
        },
        {
          "level": 3,
          "title": "meta",
          "slug": "meta"
        },
        {
          "level": 2,
          "title": "Predefined Variables Powered By Default Theme",
          "slug": "predefined-variables-powered-by-default-theme"
        },
        {
          "level": 3,
          "title": "navbar",
          "slug": "navbar"
        },
        {
          "level": 3,
          "title": "sidebar",
          "slug": "sidebar"
        }
      ],
      "summary": "\n\nAny markdown file that contains a YAML front matter block will be processed by gray-matter. The front matter must be the first thing in the markdown f ...",
      "id": "post",
      "pid": "post"
    },
    {
      "title": "Markdown Slot",
      "frontmatter": {
        "date": "2019-2-26",
        "tag": [
          "markdown",
          "vuepress"
        ],
        "author": "ULIVZ",
        "location": "Hangzhou",
        "layout": "Post",
        "permalink": "/:year/:month/:day/:slug"
      },
      "regularPath": "/_posts/2019-2-26-markdown-slot-4.html",
      "relativePath": "_posts/2019-2-26-markdown-slot-4.md",
      "key": "v-93085814",
      "path": "/2019/02/26/markdown-slot-4/",
      "headers": [
        {
          "level": 2,
          "title": "Why do I need Markdown Slot?",
          "slug": "why-do-i-need-markdown-slot"
        },
        {
          "level": 2,
          "title": "Named Slots",
          "slug": "named-slots"
        },
        {
          "level": 2,
          "title": "Default Slot Content",
          "slug": "default-slot-content"
        },
        {
          "level": 2,
          "title": "Example",
          "slug": "example"
        }
      ],
      "summary": "\n\nVuePress implements a content distribution API for Markdown. With this feature, you can split your document into multiple fragments to facilitate flexible composition in the layout component.\n\nWh ...",
      "id": "post",
      "pid": "post"
    },
    {
      "title": "Theme two",
      "frontmatter": {
        "date": "2019-5-6",
        "tag": [
          "theme",
          "blog",
          "vuepress"
        ],
        "author": "YUMO",
        "location": "beijing",
        "layout": "Post",
        "permalink": "/:year/:month/:day/:slug"
      },
      "regularPath": "/_posts/2019-5-6-writing-a-vuepress-theme-2.html",
      "relativePath": "_posts/2019-5-6-writing-a-vuepress-theme-2.md",
      "key": "v-89ba9068",
      "path": "/2019/05/06/writing-a-vuepress-theme-2/",
      "headers": [
        {
          "level": 2,
          "title": "Content Outlet",
          "slug": "content-outlet"
        },
        {
          "level": 2,
          "title": "Directory Structure",
          "slug": "directory-structure"
        },
        {
          "level": 2,
          "title": "Layout Component",
          "slug": "layout-component"
        },
        {
          "level": 2,
          "title": "Apply plugins",
          "slug": "apply-plugins"
        },
        {
          "level": 2,
          "title": "Site and Page Metadata",
          "slug": "site-and-page-metadata"
        },
        {
          "level": 2,
          "title": "Content Excerpt",
          "slug": "content-excerpt"
        },
        {
          "level": 2,
          "title": "App Level Enhancements",
          "slug": "app-level-enhancements"
        }
      ],
      "excerpt": "<h1 id=\"theme-two\"><a class=\"header-anchor\" href=\"#theme-two\">#</a> Theme two</h1>\n<p>To write a theme, create a <code>.vuepress/theme</code> directory in your docs root, and then create a <code>Layout.vue</code> file:</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>.\n└─ .vuepress\n   └─ `theme`\n       └─ Layout.vue\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>From there it's the same as developing a normal Vue application. It is entirely up to you how to organize your theme.</p>\n<h2 id=\"content-outlet\"><a class=\"header-anchor\" href=\"#content-outlet\">#</a> Content Outlet</h2>\n<p>The compiled content of the current <code>.md</code> file being rendered will be available as a special <code>&lt;Content/&gt;</code> global component. You will need to render it somewhere in your layout in order to display the content of the page. The simplest theme can be just a single <code>Layout.vue</code> component with the following content:</p>\n<!--beforebegin--><div class=\"language-html extra-class\"><!--afterbegin--><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>theme-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Content</span><span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><strong>Also see:</strong></p>\n<ul>\n<li><router-link to=\"/guide/markdown-slot.html\">Markdown Slot</router-link></li>\n</ul>\n<h2 id=\"directory-structure\"><a class=\"header-anchor\" href=\"#directory-structure\">#</a> Directory Structure</h2>\n<p>Just one <code>Layout.vue</code> might not be enough, and you might also want to define more layout components in the theme for using on different pages. You may also want to customize the <router-link to=\"/config/#palette-styl\">palette</router-link>, and even apply some plugins.</p>\n<p>So it's time to reorganize your theme, an agreed theme directory structure is as follows:</p>\n<p>::: vue\ntheme\n├── <code>global-components</code>\n│   └── xxx.vue\n├── <code>components</code>\n│   └── xxx.vue\n├── <code>layouts</code>\n│   ├── Layout.vue <em>(<strong>Mandatory</strong>)</em>\n│   └── 404.vue\n├── <code>styles</code>\n│   ├── index.styl\n│   └── palette.styl\n├── <code>templates</code>\n│   ├── dev.html\n│   └── ssr.html\n├── <code>index.js</code>\n├── <code>enhanceApp.js</code>\n└── package.json\n:::</p>\n<ul>\n<li><code>theme/global-components</code>: Components under this directory will be automatically registered as global components. For details, please refer to <a href=\"https://github.com/vuejs/vuepress/tree/master/packages/@vuepress/plugin-register-components\" target=\"_blank\" rel=\"noopener noreferrer\">@vuepress/plugin-register-components<OutboundLink/></a>.</li>\n<li><code>theme/components</code>: Your components.</li>\n<li><code>theme/layouts</code>: Layout components of the theme, where <code>Layout.vue</code> is required.</li>\n<li><code>theme/styles</code>: Global style and palette.</li>\n<li><code>theme/templates</code>: Modify default template.</li>\n<li><code>theme/index.js</code>: Entry file of theme configuration.</li>\n<li><code>theme/enhanceApp.js</code>: Theme level enhancements.</li>\n</ul>\n<p>::: warning Note\nWhen you publish your theme as an NPM package, if you don't have any theme configuration, that means you don't have <code>theme/index.js</code>, you'll need to set the <code>&quot;main&quot;</code> field  to <code>layouts/Layout.vue</code> in <code>package.json</code>, only in this way VuePress can correctly resolve the theme.</p>\n<!--beforebegin--><div class=\"language-json extra-class\"><!--afterbegin--><pre v-pre class=\"language-json\"><code><span class=\"token punctuation\">{</span>\n  ...\n  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"layouts/Layout.vue\"</span><span class=\"token punctuation\">,</span>\n  ...\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>:::</p>\n<h2 id=\"layout-component\"><a class=\"header-anchor\" href=\"#layout-component\">#</a> Layout Component</h2>\n<p>Suppose your theme layouts folder is as follows:</p>\n<p>::: vue\ntheme\n└── <code>layouts</code>\n   ├── Layout.vue\n   ├── AnotherLayout.vue\n   └── 404.vue\n:::</p>\n<p>Then, all the pages will use <code>Layout.vue</code> as layout component by default, while the routes not matching will use <code>404.vue</code>.</p>\n<p>If you want to switch the layout of some pages to <code>AnotherLayout.vue</code>, you just need to update the frontmatter of this page:</p>\n<!--beforebegin--><div class=\"language-markdown extra-class\"><!--afterbegin--><pre v-pre class=\"language-markdown\"><code><span class=\"token hr punctuation\">---</span>\n<span class=\"token title important\">layout: AnotherLayout\n<span class=\"token punctuation\">---</span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>::: tip\nEach layout component may render distinct pages. If you want to apply some global UI (e.g. global header), consider using <router-link to=\"/_posts/option-api.html#globallayout\">globalLayout</router-link>。\n:::</p>\n<h2 id=\"apply-plugins\"><a class=\"header-anchor\" href=\"#apply-plugins\">#</a> Apply plugins</h2>\n<p>You can apply some plugins to the theme via <code>theme/index.js</code>.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'@vuepress/pwa'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> \n      serviceWorker<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      updatePopup<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"site-and-page-metadata\"><a class=\"header-anchor\" href=\"#site-and-page-metadata\">#</a> Site and Page Metadata</h2>\n<p>The <code>Layout</code> component will be invoked once for every <code>.md</code> file in <code>docs</code>, and the metadata for the entire site and that specific page will be exposed respectively as <code>this.$site</code> and <code>this.$page</code> properties which are injected into every component in the app.</p>\n<p>This is the value of <code>$site</code> of this very website:</p>\n<!--beforebegin--><div class=\"language-json extra-class\"><!--afterbegin--><pre v-pre class=\"language-json\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"VuePress\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Vue-powered Static Site Generator\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"base\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"pages\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"lastUpdated\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1524027677000</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"VuePress\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"frontmatter\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    ...\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><code>title</code>, <code>description</code> and <code>base</code> are copied from respective fields in <code>.vuepress/config.js</code>. <code>pages</code> contains an array of metadata objects for each page, including its path, page title (explicitly specified in <router-link to=\"/guide/markdown.html#front-matter\">YAML front matter</router-link> or inferred from the first header on the page), and any YAML front matter data in that file.</p>\n<p>This is the <code>$page</code> object for this page you are looking at:</p>\n<!--beforebegin--><div class=\"language-json extra-class\"><!--afterbegin--><pre v-pre class=\"language-json\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"lastUpdated\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1524847549000</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/guide/custom-themes.html\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Custom Themes\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"headers\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"frontmatter\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>If the user provided <code>themeConfig</code> in <code>.vuepress/config.js</code>, it will also be available as <code>$site.themeConfig</code>. You can use this to allow users to customize behavior of your theme - for example, specifying categories and page order. You can then use these data together with <code>$site.pages</code> to dynamically construct navigation links.</p>\n<p>Finally, don't forget that <code>this.$route</code> and <code>this.$router</code> are also available as part of Vue Router's API.</p>\n<p>::: tip\n<code>lastUpdated</code> is the UNIX timestamp of this file's last git commit, for more details, refer to <router-link to=\"/theme/default-theme-config.html#last-updated\">Last Updated</router-link>.\n:::</p>\n<h2 id=\"content-excerpt\"><a class=\"header-anchor\" href=\"#content-excerpt\">#</a> Content Excerpt</h2>\n<p>If a markdown file contains a `</p>\n",
      "summary": "\n\nTo write a theme, create a .vuepress/theme directory in your docs root, and then create a Layout.vue file:\n\n.\n└─ .vuepress\n   └─ theme\n       └─ Layout.vue\n\nFrom there it's the same as ...",
      "id": "post",
      "pid": "post"
    },
    {
      "title": "Front Matter in VuePress",
      "frontmatter": {
        "date": "2018-11-7",
        "tag": [
          "frontmatter",
          "vuepress"
        ],
        "author": "ULIVZ",
        "location": "Hangzhou",
        "layout": "Post",
        "permalink": "/:year/:month/:day/:slug"
      },
      "regularPath": "/_posts/2018-11-7-frontmatter-in-vuepress.html",
      "relativePath": "_posts/2018-11-7-frontmatter-in-vuepress.md",
      "key": "v-adbb7040",
      "path": "/2018/11/07/frontmatter-in-vuepress/",
      "headers": [
        {
          "level": 2,
          "title": "Alternative Front Matter Formats",
          "slug": "alternative-front-matter-formats"
        },
        {
          "level": 2,
          "title": "Predefined Variables",
          "slug": "predefined-variables"
        },
        {
          "level": 3,
          "title": "title",
          "slug": "title"
        },
        {
          "level": 3,
          "title": "lang",
          "slug": "lang"
        },
        {
          "level": 3,
          "title": "description",
          "slug": "description"
        },
        {
          "level": 3,
          "title": "layout",
          "slug": "layout"
        },
        {
          "level": 3,
          "title": "permalink",
          "slug": "permalink"
        },
        {
          "level": 3,
          "title": "metaTitle",
          "slug": "metatitle"
        },
        {
          "level": 3,
          "title": "meta",
          "slug": "meta"
        },
        {
          "level": 2,
          "title": "Predefined Variables Powered By Default Theme",
          "slug": "predefined-variables-powered-by-default-theme"
        },
        {
          "level": 3,
          "title": "navbar",
          "slug": "navbar"
        },
        {
          "level": 3,
          "title": "sidebar",
          "slug": "sidebar"
        }
      ],
      "summary": "\n\nAny markdown file that contains a YAML front matter block will be processed by gray-matter. The front matter must be the first thing in the markdown f ...",
      "id": "post",
      "pid": "post"
    },
    {
      "title": "Theme Three",
      "frontmatter": {
        "date": "2019-5-6",
        "tag": [
          "theme",
          "blog",
          "vuepress"
        ],
        "author": "ULIVZ",
        "location": "Shanghai",
        "layout": "Post",
        "permalink": "/:year/:month/:day/:slug"
      },
      "regularPath": "/_posts/2019-5-6-writing-a-vuepress-theme-3.html",
      "relativePath": "_posts/2019-5-6-writing-a-vuepress-theme-3.md",
      "key": "v-2a9faa6c",
      "path": "/2019/05/06/writing-a-vuepress-theme-3/",
      "headers": [
        {
          "level": 2,
          "title": "Content Outlet",
          "slug": "content-outlet"
        },
        {
          "level": 2,
          "title": "Directory Structure",
          "slug": "directory-structure"
        },
        {
          "level": 2,
          "title": "Layout Component",
          "slug": "layout-component"
        },
        {
          "level": 2,
          "title": "Apply plugins",
          "slug": "apply-plugins"
        },
        {
          "level": 2,
          "title": "Site and Page Metadata",
          "slug": "site-and-page-metadata"
        },
        {
          "level": 2,
          "title": "Content Excerpt",
          "slug": "content-excerpt"
        },
        {
          "level": 2,
          "title": "App Level Enhancements",
          "slug": "app-level-enhancements"
        }
      ],
      "excerpt": "<h1 id=\"theme-three\"><a class=\"header-anchor\" href=\"#theme-three\">#</a> Theme Three</h1>\n<p>To write a theme, create a <code>.vuepress/theme</code> directory in your docs root, and then create a <code>Layout.vue</code> file:</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>.\n└─ .vuepress\n   └─ `theme`\n       └─ Layout.vue\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>From there it's the same as developing a normal Vue application. It is entirely up to you how to organize your theme.</p>\n<h2 id=\"content-outlet\"><a class=\"header-anchor\" href=\"#content-outlet\">#</a> Content Outlet</h2>\n<p>The compiled content of the current <code>.md</code> file being rendered will be available as a special <code>&lt;Content/&gt;</code> global component. You will need to render it somewhere in your layout in order to display the content of the page. The simplest theme can be just a single <code>Layout.vue</code> component with the following content:</p>\n<!--beforebegin--><div class=\"language-html extra-class\"><!--afterbegin--><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>theme-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Content</span><span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><strong>Also see:</strong></p>\n<ul>\n<li><router-link to=\"/guide/markdown-slot.html\">Markdown Slot</router-link></li>\n</ul>\n<h2 id=\"directory-structure\"><a class=\"header-anchor\" href=\"#directory-structure\">#</a> Directory Structure</h2>\n<p>Just one <code>Layout.vue</code> might not be enough, and you might also want to define more layout components in the theme for using on different pages. You may also want to customize the <router-link to=\"/config/#palette-styl\">palette</router-link>, and even apply some plugins.</p>\n<p>So it's time to reorganize your theme, an agreed theme directory structure is as follows:</p>\n<p>::: vue\ntheme\n├── <code>global-components</code>\n│   └── xxx.vue\n├── <code>components</code>\n│   └── xxx.vue\n├── <code>layouts</code>\n│   ├── Layout.vue <em>(<strong>Mandatory</strong>)</em>\n│   └── 404.vue\n├── <code>styles</code>\n│   ├── index.styl\n│   └── palette.styl\n├── <code>templates</code>\n│   ├── dev.html\n│   └── ssr.html\n├── <code>index.js</code>\n├── <code>enhanceApp.js</code>\n└── package.json\n:::</p>\n<ul>\n<li><code>theme/global-components</code>: Components under this directory will be automatically registered as global components. For details, please refer to <a href=\"https://github.com/vuejs/vuepress/tree/master/packages/@vuepress/plugin-register-components\" target=\"_blank\" rel=\"noopener noreferrer\">@vuepress/plugin-register-components<OutboundLink/></a>.</li>\n<li><code>theme/components</code>: Your components.</li>\n<li><code>theme/layouts</code>: Layout components of the theme, where <code>Layout.vue</code> is required.</li>\n<li><code>theme/styles</code>: Global style and palette.</li>\n<li><code>theme/templates</code>: Modify default template.</li>\n<li><code>theme/index.js</code>: Entry file of theme configuration.</li>\n<li><code>theme/enhanceApp.js</code>: Theme level enhancements.</li>\n</ul>\n<p>::: warning Note\nWhen you publish your theme as an NPM package, if you don't have any theme configuration, that means you don't have <code>theme/index.js</code>, you'll need to set the <code>&quot;main&quot;</code> field  to <code>layouts/Layout.vue</code> in <code>package.json</code>, only in this way VuePress can correctly resolve the theme.</p>\n<!--beforebegin--><div class=\"language-json extra-class\"><!--afterbegin--><pre v-pre class=\"language-json\"><code><span class=\"token punctuation\">{</span>\n  ...\n  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"layouts/Layout.vue\"</span><span class=\"token punctuation\">,</span>\n  ...\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>:::</p>\n<h2 id=\"layout-component\"><a class=\"header-anchor\" href=\"#layout-component\">#</a> Layout Component</h2>\n<p>Suppose your theme layouts folder is as follows:</p>\n<p>::: vue\ntheme\n└── <code>layouts</code>\n   ├── Layout.vue\n   ├── AnotherLayout.vue\n   └── 404.vue\n:::</p>\n<p>Then, all the pages will use <code>Layout.vue</code> as layout component by default, while the routes not matching will use <code>404.vue</code>.</p>\n<p>If you want to switch the layout of some pages to <code>AnotherLayout.vue</code>, you just need to update the frontmatter of this page:</p>\n<!--beforebegin--><div class=\"language-markdown extra-class\"><!--afterbegin--><pre v-pre class=\"language-markdown\"><code><span class=\"token hr punctuation\">---</span>\n<span class=\"token title important\">layout: AnotherLayout\n<span class=\"token punctuation\">---</span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>::: tip\nEach layout component may render distinct pages. If you want to apply some global UI (e.g. global header), consider using <router-link to=\"/_posts/option-api.html#globallayout\">globalLayout</router-link>。\n:::</p>\n<h2 id=\"apply-plugins\"><a class=\"header-anchor\" href=\"#apply-plugins\">#</a> Apply plugins</h2>\n<p>You can apply some plugins to the theme via <code>theme/index.js</code>.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'@vuepress/pwa'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> \n      serviceWorker<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      updatePopup<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"site-and-page-metadata\"><a class=\"header-anchor\" href=\"#site-and-page-metadata\">#</a> Site and Page Metadata</h2>\n<p>The <code>Layout</code> component will be invoked once for every <code>.md</code> file in <code>docs</code>, and the metadata for the entire site and that specific page will be exposed respectively as <code>this.$site</code> and <code>this.$page</code> properties which are injected into every component in the app.</p>\n<p>This is the value of <code>$site</code> of this very website:</p>\n<!--beforebegin--><div class=\"language-json extra-class\"><!--afterbegin--><pre v-pre class=\"language-json\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"VuePress\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Vue-powered Static Site Generator\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"base\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"pages\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"lastUpdated\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1524027677000</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"VuePress\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"frontmatter\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    ...\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><code>title</code>, <code>description</code> and <code>base</code> are copied from respective fields in <code>.vuepress/config.js</code>. <code>pages</code> contains an array of metadata objects for each page, including its path, page title (explicitly specified in <router-link to=\"/guide/markdown.html#front-matter\">YAML front matter</router-link> or inferred from the first header on the page), and any YAML front matter data in that file.</p>\n<p>This is the <code>$page</code> object for this page you are looking at:</p>\n<!--beforebegin--><div class=\"language-json extra-class\"><!--afterbegin--><pre v-pre class=\"language-json\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"lastUpdated\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1524847549000</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/guide/custom-themes.html\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Custom Themes\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"headers\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"frontmatter\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>If the user provided <code>themeConfig</code> in <code>.vuepress/config.js</code>, it will also be available as <code>$site.themeConfig</code>. You can use this to allow users to customize behavior of your theme - for example, specifying categories and page order. You can then use these data together with <code>$site.pages</code> to dynamically construct navigation links.</p>\n<p>Finally, don't forget that <code>this.$route</code> and <code>this.$router</code> are also available as part of Vue Router's API.</p>\n<p>::: tip\n<code>lastUpdated</code> is the UNIX timestamp of this file's last git commit, for more details, refer to <router-link to=\"/theme/default-theme-config.html#last-updated\">Last Updated</router-link>.\n:::</p>\n<h2 id=\"content-excerpt\"><a class=\"header-anchor\" href=\"#content-excerpt\">#</a> Content Excerpt</h2>\n<p>If a markdown file contains a `</p>\n",
      "summary": "\n\nTo write a theme, create a .vuepress/theme directory in your docs root, and then create a Layout.vue file:\n\n.\n└─ .vuepress\n   └─ theme\n       └─ Layout.vue\n\nFrom there it's the same as ...",
      "id": "post",
      "pid": "post"
    },
    {
      "title": "Markdown Slot",
      "frontmatter": {
        "date": "2019-2-26",
        "tag": [
          "markdown",
          "vuepress"
        ],
        "author": "ULIVZ",
        "location": "Hangzhou",
        "layout": "Post",
        "permalink": "/:year/:month/:day/:slug"
      },
      "regularPath": "/_posts/2019-2-26-markdown-slot.html",
      "relativePath": "_posts/2019-2-26-markdown-slot.md",
      "key": "v-7cf824f8",
      "path": "/2019/02/26/markdown-slot/",
      "headers": [
        {
          "level": 2,
          "title": "Why do I need Markdown Slot?",
          "slug": "why-do-i-need-markdown-slot"
        },
        {
          "level": 2,
          "title": "Named Slots",
          "slug": "named-slots"
        },
        {
          "level": 2,
          "title": "Default Slot Content",
          "slug": "default-slot-content"
        },
        {
          "level": 2,
          "title": "Example",
          "slug": "example"
        }
      ],
      "summary": "\n\nVuePress implements a content distribution API for Markdown. With this feature, you can split your document into multiple fragments to facilitate flexible composition in the layout component.\n\nWh ...",
      "id": "post",
      "pid": "post"
    },
    {
      "title": "Markdown Slot",
      "frontmatter": {
        "date": "2019-2-26",
        "tag": [
          "markdown",
          "vuepress"
        ],
        "author": "ULIVZ",
        "location": "Hangzhou",
        "layout": "Post",
        "permalink": "/:year/:month/:day/:slug"
      },
      "regularPath": "/_posts/2019-2-26-markdown-slot-2.html",
      "relativePath": "_posts/2019-2-26-markdown-slot-2.md",
      "key": "v-b7708f0c",
      "path": "/2019/02/26/markdown-slot-2/",
      "headers": [
        {
          "level": 2,
          "title": "Why do I need Markdown Slot?",
          "slug": "why-do-i-need-markdown-slot"
        },
        {
          "level": 2,
          "title": "Named Slots",
          "slug": "named-slots"
        },
        {
          "level": 2,
          "title": "Default Slot Content",
          "slug": "default-slot-content"
        },
        {
          "level": 2,
          "title": "Example",
          "slug": "example"
        }
      ],
      "summary": "\n\nVuePress implements a content distribution API for Markdown. With this feature, you can split your document into multiple fragments to facilitate flexible composition in the layout component.\n\nWh ...",
      "id": "post",
      "pid": "post"
    },
    {
      "title": "Theme One",
      "frontmatter": {
        "date": "2019-5-6",
        "tag": [
          "theme",
          "blog",
          "vuepress"
        ],
        "author": "ULIVZ",
        "location": "Wuhan",
        "layout": "Post",
        "permalink": "/:year/:month/:day/:slug"
      },
      "regularPath": "/_posts/2019-5-6-writing-a-vuepress-theme.html",
      "relativePath": "_posts/2019-5-6-writing-a-vuepress-theme.md",
      "key": "v-2df85d56",
      "path": "/2019/05/06/writing-a-vuepress-theme/",
      "headers": [
        {
          "level": 2,
          "title": "Content Outlet",
          "slug": "content-outlet"
        },
        {
          "level": 2,
          "title": "Directory Structure",
          "slug": "directory-structure"
        },
        {
          "level": 2,
          "title": "Layout Component",
          "slug": "layout-component"
        },
        {
          "level": 2,
          "title": "Apply plugins",
          "slug": "apply-plugins"
        },
        {
          "level": 2,
          "title": "Site and Page Metadata",
          "slug": "site-and-page-metadata"
        },
        {
          "level": 2,
          "title": "Content Excerpt",
          "slug": "content-excerpt"
        },
        {
          "level": 2,
          "title": "App Level Enhancements",
          "slug": "app-level-enhancements"
        }
      ],
      "excerpt": "<h1 id=\"theme-one\"><a class=\"header-anchor\" href=\"#theme-one\">#</a> Theme One</h1>\n<p>To write a theme, create a <code>.vuepress/theme</code> directory in your docs root, and then create a <code>Layout.vue</code> file:</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>.\n└─ .vuepress\n   └─ `theme`\n       └─ Layout.vue\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>From there it's the same as developing a normal Vue application. It is entirely up to you how to organize your theme.</p>\n<h2 id=\"content-outlet\"><a class=\"header-anchor\" href=\"#content-outlet\">#</a> Content Outlet</h2>\n<p>The compiled content of the current <code>.md</code> file being rendered will be available as a special <code>&lt;Content/&gt;</code> global component. You will need to render it somewhere in your layout in order to display the content of the page. The simplest theme can be just a single <code>Layout.vue</code> component with the following content:</p>\n<!--beforebegin--><div class=\"language-html extra-class\"><!--afterbegin--><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>theme-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Content</span><span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><strong>Also see:</strong></p>\n<ul>\n<li><router-link to=\"/guide/markdown-slot.html\">Markdown Slot</router-link></li>\n</ul>\n<h2 id=\"directory-structure\"><a class=\"header-anchor\" href=\"#directory-structure\">#</a> Directory Structure</h2>\n<p>Just one <code>Layout.vue</code> might not be enough, and you might also want to define more layout components in the theme for using on different pages. You may also want to customize the <router-link to=\"/config/#palette-styl\">palette</router-link>, and even apply some plugins.</p>\n<p>So it's time to reorganize your theme, an agreed theme directory structure is as follows:</p>\n<p>::: vue\ntheme\n├── <code>global-components</code>\n│   └── xxx.vue\n├── <code>components</code>\n│   └── xxx.vue\n├── <code>layouts</code>\n│   ├── Layout.vue <em>(<strong>Mandatory</strong>)</em>\n│   └── 404.vue\n├── <code>styles</code>\n│   ├── index.styl\n│   └── palette.styl\n├── <code>templates</code>\n│   ├── dev.html\n│   └── ssr.html\n├── <code>index.js</code>\n├── <code>enhanceApp.js</code>\n└── package.json\n:::</p>\n<ul>\n<li><code>theme/global-components</code>: Components under this directory will be automatically registered as global components. For details, please refer to <a href=\"https://github.com/vuejs/vuepress/tree/master/packages/@vuepress/plugin-register-components\" target=\"_blank\" rel=\"noopener noreferrer\">@vuepress/plugin-register-components<OutboundLink/></a>.</li>\n<li><code>theme/components</code>: Your components.</li>\n<li><code>theme/layouts</code>: Layout components of the theme, where <code>Layout.vue</code> is required.</li>\n<li><code>theme/styles</code>: Global style and palette.</li>\n<li><code>theme/templates</code>: Modify default template.</li>\n<li><code>theme/index.js</code>: Entry file of theme configuration.</li>\n<li><code>theme/enhanceApp.js</code>: Theme level enhancements.</li>\n</ul>\n<p>::: warning Note\nWhen you publish your theme as an NPM package, if you don't have any theme configuration, that means you don't have <code>theme/index.js</code>, you'll need to set the <code>&quot;main&quot;</code> field  to <code>layouts/Layout.vue</code> in <code>package.json</code>, only in this way VuePress can correctly resolve the theme.</p>\n<!--beforebegin--><div class=\"language-json extra-class\"><!--afterbegin--><pre v-pre class=\"language-json\"><code><span class=\"token punctuation\">{</span>\n  ...\n  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"layouts/Layout.vue\"</span><span class=\"token punctuation\">,</span>\n  ...\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>:::</p>\n<h2 id=\"layout-component\"><a class=\"header-anchor\" href=\"#layout-component\">#</a> Layout Component</h2>\n<p>Suppose your theme layouts folder is as follows:</p>\n<p>::: vue\ntheme\n└── <code>layouts</code>\n   ├── Layout.vue\n   ├── AnotherLayout.vue\n   └── 404.vue\n:::</p>\n<p>Then, all the pages will use <code>Layout.vue</code> as layout component by default, while the routes not matching will use <code>404.vue</code>.</p>\n<p>If you want to switch the layout of some pages to <code>AnotherLayout.vue</code>, you just need to update the frontmatter of this page:</p>\n<!--beforebegin--><div class=\"language-markdown extra-class\"><!--afterbegin--><pre v-pre class=\"language-markdown\"><code><span class=\"token hr punctuation\">---</span>\n<span class=\"token title important\">layout: AnotherLayout\n<span class=\"token punctuation\">---</span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>::: tip\nEach layout component may render distinct pages. If you want to apply some global UI (e.g. global header), consider using <router-link to=\"/_posts/option-api.html#globallayout\">globalLayout</router-link>。\n:::</p>\n<h2 id=\"apply-plugins\"><a class=\"header-anchor\" href=\"#apply-plugins\">#</a> Apply plugins</h2>\n<p>You can apply some plugins to the theme via <code>theme/index.js</code>.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'@vuepress/pwa'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> \n      serviceWorker<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      updatePopup<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"site-and-page-metadata\"><a class=\"header-anchor\" href=\"#site-and-page-metadata\">#</a> Site and Page Metadata</h2>\n<p>The <code>Layout</code> component will be invoked once for every <code>.md</code> file in <code>docs</code>, and the metadata for the entire site and that specific page will be exposed respectively as <code>this.$site</code> and <code>this.$page</code> properties which are injected into every component in the app.</p>\n<p>This is the value of <code>$site</code> of this very website:</p>\n<!--beforebegin--><div class=\"language-json extra-class\"><!--afterbegin--><pre v-pre class=\"language-json\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"VuePress\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Vue-powered Static Site Generator\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"base\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"pages\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"lastUpdated\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1524027677000</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"VuePress\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"frontmatter\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    ...\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><code>title</code>, <code>description</code> and <code>base</code> are copied from respective fields in <code>.vuepress/config.js</code>. <code>pages</code> contains an array of metadata objects for each page, including its path, page title (explicitly specified in <router-link to=\"/guide/markdown.html#front-matter\">YAML front matter</router-link> or inferred from the first header on the page), and any YAML front matter data in that file.</p>\n<p>This is the <code>$page</code> object for this page you are looking at:</p>\n<!--beforebegin--><div class=\"language-json extra-class\"><!--afterbegin--><pre v-pre class=\"language-json\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"lastUpdated\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1524847549000</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/guide/custom-themes.html\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Custom Themes\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"headers\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"frontmatter\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>If the user provided <code>themeConfig</code> in <code>.vuepress/config.js</code>, it will also be available as <code>$site.themeConfig</code>. You can use this to allow users to customize behavior of your theme - for example, specifying categories and page order. You can then use these data together with <code>$site.pages</code> to dynamically construct navigation links.</p>\n<p>Finally, don't forget that <code>this.$route</code> and <code>this.$router</code> are also available as part of Vue Router's API.</p>\n<p>::: tip\n<code>lastUpdated</code> is the UNIX timestamp of this file's last git commit, for more details, refer to <router-link to=\"/theme/default-theme-config.html#last-updated\">Last Updated</router-link>.\n:::</p>\n<h2 id=\"content-excerpt\"><a class=\"header-anchor\" href=\"#content-excerpt\">#</a> Content Excerpt</h2>\n<p>If a markdown file contains a `</p>\n",
      "summary": "\n\nTo write a theme, create a .vuepress/theme directory in your docs root, and then create a Layout.vue file:\n\n.\n└─ .vuepress\n   └─ theme\n       └─ Layout.vue\n\nFrom there it's the same as ...",
      "id": "post",
      "pid": "post"
    },
    {
      "title": "Theme Four",
      "frontmatter": {
        "date": "2019-5-6",
        "tag": [
          "theme",
          "blog",
          "vuepress"
        ],
        "author": "ULIVZ",
        "location": "Lasa",
        "layout": "Post",
        "permalink": "/:year/:month/:day/:slug"
      },
      "regularPath": "/_posts/2019-5-6-writing-a-vuepress-theme-4.html",
      "relativePath": "_posts/2019-5-6-writing-a-vuepress-theme-4.md",
      "key": "v-1a3d9dc8",
      "path": "/2019/05/06/writing-a-vuepress-theme-4/",
      "headers": [
        {
          "level": 2,
          "title": "Content Outlet",
          "slug": "content-outlet"
        },
        {
          "level": 2,
          "title": "Directory Structure",
          "slug": "directory-structure"
        },
        {
          "level": 2,
          "title": "Layout Component",
          "slug": "layout-component"
        },
        {
          "level": 2,
          "title": "Apply plugins",
          "slug": "apply-plugins"
        },
        {
          "level": 2,
          "title": "Site and Page Metadata",
          "slug": "site-and-page-metadata"
        },
        {
          "level": 2,
          "title": "Content Excerpt",
          "slug": "content-excerpt"
        },
        {
          "level": 2,
          "title": "App Level Enhancements",
          "slug": "app-level-enhancements"
        }
      ],
      "excerpt": "<h1 id=\"theme-four\"><a class=\"header-anchor\" href=\"#theme-four\">#</a> Theme Four</h1>\n<p>To write a theme, create a <code>.vuepress/theme</code> directory in your docs root, and then create a <code>Layout.vue</code> file:</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>.\n└─ .vuepress\n   └─ `theme`\n       └─ Layout.vue\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>From there it's the same as developing a normal Vue application. It is entirely up to you how to organize your theme.</p>\n<h2 id=\"content-outlet\"><a class=\"header-anchor\" href=\"#content-outlet\">#</a> Content Outlet</h2>\n<p>The compiled content of the current <code>.md</code> file being rendered will be available as a special <code>&lt;Content/&gt;</code> global component. You will need to render it somewhere in your layout in order to display the content of the page. The simplest theme can be just a single <code>Layout.vue</code> component with the following content:</p>\n<!--beforebegin--><div class=\"language-html extra-class\"><!--afterbegin--><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>theme-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Content</span><span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><strong>Also see:</strong></p>\n<ul>\n<li><router-link to=\"/guide/markdown-slot.html\">Markdown Slot</router-link></li>\n</ul>\n<h2 id=\"directory-structure\"><a class=\"header-anchor\" href=\"#directory-structure\">#</a> Directory Structure</h2>\n<p>Just one <code>Layout.vue</code> might not be enough, and you might also want to define more layout components in the theme for using on different pages. You may also want to customize the <router-link to=\"/config/#palette-styl\">palette</router-link>, and even apply some plugins.</p>\n<p>So it's time to reorganize your theme, an agreed theme directory structure is as follows:</p>\n<p>::: vue\ntheme\n├── <code>global-components</code>\n│   └── xxx.vue\n├── <code>components</code>\n│   └── xxx.vue\n├── <code>layouts</code>\n│   ├── Layout.vue <em>(<strong>Mandatory</strong>)</em>\n│   └── 404.vue\n├── <code>styles</code>\n│   ├── index.styl\n│   └── palette.styl\n├── <code>templates</code>\n│   ├── dev.html\n│   └── ssr.html\n├── <code>index.js</code>\n├── <code>enhanceApp.js</code>\n└── package.json\n:::</p>\n<ul>\n<li><code>theme/global-components</code>: Components under this directory will be automatically registered as global components. For details, please refer to <a href=\"https://github.com/vuejs/vuepress/tree/master/packages/@vuepress/plugin-register-components\" target=\"_blank\" rel=\"noopener noreferrer\">@vuepress/plugin-register-components<OutboundLink/></a>.</li>\n<li><code>theme/components</code>: Your components.</li>\n<li><code>theme/layouts</code>: Layout components of the theme, where <code>Layout.vue</code> is required.</li>\n<li><code>theme/styles</code>: Global style and palette.</li>\n<li><code>theme/templates</code>: Modify default template.</li>\n<li><code>theme/index.js</code>: Entry file of theme configuration.</li>\n<li><code>theme/enhanceApp.js</code>: Theme level enhancements.</li>\n</ul>\n<p>::: warning Note\nWhen you publish your theme as an NPM package, if you don't have any theme configuration, that means you don't have <code>theme/index.js</code>, you'll need to set the <code>&quot;main&quot;</code> field  to <code>layouts/Layout.vue</code> in <code>package.json</code>, only in this way VuePress can correctly resolve the theme.</p>\n<!--beforebegin--><div class=\"language-json extra-class\"><!--afterbegin--><pre v-pre class=\"language-json\"><code><span class=\"token punctuation\">{</span>\n  ...\n  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"layouts/Layout.vue\"</span><span class=\"token punctuation\">,</span>\n  ...\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>:::</p>\n<h2 id=\"layout-component\"><a class=\"header-anchor\" href=\"#layout-component\">#</a> Layout Component</h2>\n<p>Suppose your theme layouts folder is as follows:</p>\n<p>::: vue\ntheme\n└── <code>layouts</code>\n   ├── Layout.vue\n   ├── AnotherLayout.vue\n   └── 404.vue\n:::</p>\n<p>Then, all the pages will use <code>Layout.vue</code> as layout component by default, while the routes not matching will use <code>404.vue</code>.</p>\n<p>If you want to switch the layout of some pages to <code>AnotherLayout.vue</code>, you just need to update the frontmatter of this page:</p>\n<!--beforebegin--><div class=\"language-markdown extra-class\"><!--afterbegin--><pre v-pre class=\"language-markdown\"><code><span class=\"token hr punctuation\">---</span>\n<span class=\"token title important\">layout: AnotherLayout\n<span class=\"token punctuation\">---</span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>::: tip\nEach layout component may render distinct pages. If you want to apply some global UI (e.g. global header), consider using <router-link to=\"/_posts/option-api.html#globallayout\">globalLayout</router-link>。\n:::</p>\n<h2 id=\"apply-plugins\"><a class=\"header-anchor\" href=\"#apply-plugins\">#</a> Apply plugins</h2>\n<p>You can apply some plugins to the theme via <code>theme/index.js</code>.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'@vuepress/pwa'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> \n      serviceWorker<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      updatePopup<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"site-and-page-metadata\"><a class=\"header-anchor\" href=\"#site-and-page-metadata\">#</a> Site and Page Metadata</h2>\n<p>The <code>Layout</code> component will be invoked once for every <code>.md</code> file in <code>docs</code>, and the metadata for the entire site and that specific page will be exposed respectively as <code>this.$site</code> and <code>this.$page</code> properties which are injected into every component in the app.</p>\n<p>This is the value of <code>$site</code> of this very website:</p>\n<!--beforebegin--><div class=\"language-json extra-class\"><!--afterbegin--><pre v-pre class=\"language-json\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"VuePress\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Vue-powered Static Site Generator\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"base\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"pages\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"lastUpdated\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1524027677000</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"VuePress\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"frontmatter\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    ...\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><code>title</code>, <code>description</code> and <code>base</code> are copied from respective fields in <code>.vuepress/config.js</code>. <code>pages</code> contains an array of metadata objects for each page, including its path, page title (explicitly specified in <router-link to=\"/guide/markdown.html#front-matter\">YAML front matter</router-link> or inferred from the first header on the page), and any YAML front matter data in that file.</p>\n<p>This is the <code>$page</code> object for this page you are looking at:</p>\n<!--beforebegin--><div class=\"language-json extra-class\"><!--afterbegin--><pre v-pre class=\"language-json\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"lastUpdated\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1524847549000</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/guide/custom-themes.html\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Custom Themes\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"headers\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"frontmatter\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>If the user provided <code>themeConfig</code> in <code>.vuepress/config.js</code>, it will also be available as <code>$site.themeConfig</code>. You can use this to allow users to customize behavior of your theme - for example, specifying categories and page order. You can then use these data together with <code>$site.pages</code> to dynamically construct navigation links.</p>\n<p>Finally, don't forget that <code>this.$route</code> and <code>this.$router</code> are also available as part of Vue Router's API.</p>\n<p>::: tip\n<code>lastUpdated</code> is the UNIX timestamp of this file's last git commit, for more details, refer to <router-link to=\"/theme/default-theme-config.html#last-updated\">Last Updated</router-link>.\n:::</p>\n<h2 id=\"content-excerpt\"><a class=\"header-anchor\" href=\"#content-excerpt\">#</a> Content Excerpt</h2>\n<p>If a markdown file contains a `</p>\n",
      "summary": "\n\nTo write a theme, create a .vuepress/theme directory in your docs root, and then create a Layout.vue file:\n\n.\n└─ .vuepress\n   └─ theme\n       └─ Layout.vue\n\nFrom there it's the same as ...",
      "id": "post",
      "pid": "post"
    },
    {
      "frontmatter": {
        "layout": "Layout",
        "title": "Post"
      },
      "regularPath": "/",
      "key": "v-b2754d56",
      "path": "/"
    },
    {
      "frontmatter": {
        "layout": "FrontmatterKey",
        "title": "Tag"
      },
      "regularPath": "/tag/",
      "key": "v-b1564aac",
      "path": "/tag/"
    },
    {
      "frontmatter": {
        "layout": "FrontmatterPagination",
        "title": "frontmatter tag"
      },
      "regularPath": "/tag/frontmatter/",
      "key": "v-f8241222",
      "path": "/tag/frontmatter/"
    },
    {
      "frontmatter": {
        "layout": "FrontmatterPagination",
        "title": "原创 tag"
      },
      "regularPath": "/tag/%E5%8E%9F%E5%88%9B/",
      "key": "v-31daeb9c",
      "path": "/tag/原创/"
    },
    {
      "frontmatter": {
        "layout": "FrontmatterPagination",
        "title": "markdown tag"
      },
      "regularPath": "/tag/markdown/",
      "key": "v-3ae5b494",
      "path": "/tag/markdown/"
    },
    {
      "frontmatter": {
        "layout": "FrontmatterPagination",
        "title": "vuepress tag"
      },
      "regularPath": "/tag/vuepress/",
      "key": "v-dfb71430",
      "path": "/tag/vuepress/"
    },
    {
      "frontmatter": {
        "layout": "FrontmatterPagination",
        "title": "theme tag"
      },
      "regularPath": "/tag/theme/",
      "key": "v-58f012a0",
      "path": "/tag/theme/"
    },
    {
      "frontmatter": {
        "layout": "FrontmatterPagination",
        "title": "blog tag"
      },
      "regularPath": "/tag/blog/",
      "key": "v-1559f73a",
      "path": "/tag/blog/"
    },
    {
      "frontmatter": {
        "layout": "Layout",
        "title": "Page 1 | post"
      },
      "regularPath": "/page/2/",
      "key": "v-8fdafa70",
      "path": "/page/2/"
    },
    {
      "frontmatter": {
        "layout": "Layout",
        "title": "Page 2 | post"
      },
      "regularPath": "/page/3/",
      "key": "v-8fdafa32",
      "path": "/page/3/"
    },
    {
      "frontmatter": {
        "layout": "Layout",
        "title": "Page 1 - vuepress | tag"
      },
      "regularPath": "/tag/vuepress/page/2/",
      "key": "v-c5eeaa56",
      "path": "/tag/vuepress/page/2/"
    }
  ],
  "themeConfig": {
    "nav": [
      {
        "text": "Blog",
        "link": "/"
      },
      {
        "text": "Tags",
        "link": "/tag/"
      }
    ],
    "footer": {
      "contact": [
        {
          "type": "github",
          "link": "https://github.com/ulivz"
        },
        {
          "type": "twitter",
          "link": "https://twitter.com/_ulivz"
        }
      ],
      "copyright": [
        {
          "text": "Privacy Policy",
          "link": "https://policies.google.com/privacy?hl=en-US"
        },
        {
          "text": "MIT Licensed | Copyright © 2018-present Vue.js",
          "link": ""
        }
      ]
    },
    "summary": true,
    "summaryLength": 200,
    "pwa": false
  }
}